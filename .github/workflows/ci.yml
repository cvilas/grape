name: Build using LLVM toolchain

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  setup:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false # Allow other builds to continue even if one fails
      matrix:
        include:
          - runner: [self-hosted, X64]
            name: x86_64            
          - runner: [self-hosted, ARM64]
            name: aarch64
  
    name: Setup (${{ matrix.name }})
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch history for versioning
        run: |
          git fetch --unshallow --tags || git fetch --depth=100 --tags

      - name: Set cache directories
        run: |
          echo "CCACHE_DIR=$HOME/.cache/ccache" >> $GITHUB_ENV
          echo "CTCACHE_DIR=$HOME/.cache/ctcache" >> $GITHUB_ENV

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.CCACHE_DIR }}
            ${{ env.CTCACHE_DIR }}
          key: grape-${{ runner.arch }}-${{ runner.os }}-cache
          restore-keys: |
            grape-${{ runner.arch }}-${{ runner.os }}-cache

      - name: Install system dependencies and utilities 
        run: |
          chmod +x ./toolchains/install_base.sh
          ./toolchains/install_base.sh

      - name: Install CMake
        run: |
          chmod +x ./toolchains/install_cmake.sh
          ./toolchains/install_cmake.sh

      - name: Install LLVM/Clang toolchain
        run: |
          chmod +x ./toolchains/install_llvm.sh
          ./toolchains/install_llvm.sh

      - name: Install GCC toolchain
        run: |
          chmod +x ./toolchains/install_gcc.sh
          ./toolchains/install_gcc.sh

  build-and-test-clang:
    needs: setup
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false # Allow other builds to continue even if one fails
      matrix:
        include:
          - runner: [self-hosted, X64]
            name: x86_64            
          - runner: [self-hosted, ARM64]
            name: aarch64
    name: Build and Test (Clang, ${{ matrix.name }})
    steps:
      - name: Configure
        run: cmake --preset clang -DLINTER_WARNING_IS_ERROR=ON
      
      - name: Check formatting
        run: |
          cmake --build build/clang --target format
          if ! git diff --exit-code --quiet; then
            echo "::error::Following files are incorrectly formatted"
            git status
            exit 1
          fi

      - name: Build
        run: cmake --build build/clang --target all examples tests      

      - name: Run unit tests
        run: cmake --build build/clang --target check
  
  build-and-test-gcc:
    needs: setup
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false # Allow other builds to continue even if one fails
      matrix:
        include:
          - runner: [self-hosted, X64]
            name: x86_64            
          - runner: [self-hosted, ARM64]
            name: aarch64
    name: Build and Test (GCC, ${{ matrix.name }})
    steps:
      - name: Configure
        run: cmake --preset native -DLINTER_WARNING_IS_ERROR=ON

      - name: Build
        run: cmake --build build/native --target all examples tests    

      - name: Run unit tests
        run: cmake --build build/native --target check

  report-cache:
    needs: [setup, build-and-test-clang, build-and-test-gcc]
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false # Allow other builds to continue even if one fails
      matrix:
        include:
          - runner: [self-hosted, X64]
            name: x86_64            
          - runner: [self-hosted, ARM64]
            name: aarch64
    name: Report Cache Stats (${{ matrix.name }})
    steps:
      - name: Report ccache stats
        run: ccache -s

# TODO
# - Build for both clang and gcc
# - Setup configuration presets for applications, developer and CI builds
# - After PR is merged and newly tagged, build and generate deployment artifacts (tarball)
# - Introduce sanitizer builds including [RTSan](https://clang.llvm.org/docs/RealtimeSanitizer.html)
