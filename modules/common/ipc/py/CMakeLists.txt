# =================================================================================================
# Copyright (C) 2025 GRAPE Contributors
# =================================================================================================

# TODO(vilas): When more than one module require Python support, wrap the following python module 
# generation logic into a function and put it in gbs/07_modules_py.cmake

find_package(Python REQUIRED COMPONENTS Interpreter Development.Module)
find_package(pybind11 CONFIG REQUIRED)

# set python extension module name. Required by autogenerated module files
# Note: Module name should match what's passed to PYBIND11_MODULE() macro
set(PY_MODULE_NAME grape_ipc_py)

# Build python extension module
set(SOURCES 
    bindings.h
    bindings.cpp 
    config_bindings.cpp 
    match_bindings.cpp 
    publisher_bindings.cpp 
    session_bindings.cpp 
    subscriber_bindings.cpp
    topic_bindings.cpp)

pybind11_add_module(${PY_MODULE_NAME} ${SOURCES})
target_link_libraries(${PY_MODULE_NAME} PRIVATE grape::ipc)
add_clang_format(${PY_MODULE_NAME})

# generate module directory structure
set(PY_BINDINGS_DIR ${CMAKE_CURRENT_BINARY_DIR}/${PY_MODULE_NAME})
file(MAKE_DIRECTORY ${PY_BINDINGS_DIR})
configure_file(${GBS_TEMPLATES_DIR}/py/__init__.py.in ${PY_BINDINGS_DIR}/__init__.py @ONLY)
configure_file(${GBS_TEMPLATES_DIR}/py/setup.py.in ${CMAKE_CURRENT_BINARY_DIR}/setup.py @ONLY)

set(WHEEL_DIR ${CMAKE_BINARY_DIR}/share/${CMAKE_PROJECT_NAME}/py/wheels)

# Package module as wheel
add_custom_target(
    ${PY_MODULE_NAME}_wheel ALL
    COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${PY_MODULE_NAME}> ${PY_BINDINGS_DIR}/
    COMMAND pyproject-build --wheel --outdir ${WHEEL_DIR}
    DEPENDS ${PY_MODULE_NAME}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
   COMMENT "Building Python package (wheel) for ${MODULE_NAME}"
)

# Install wheels with 'install' 
install(
    DIRECTORY ${WHEEL_DIR}/
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${CMAKE_PROJECT_NAME}/py/wheels
    COMPONENT python_wheels
)
