//=================================================================================================
// Copyright (C) 2023 GRAPE Contributors
//=================================================================================================

#pragma once

#include "grape/log/config.h"
#include "grape/realtime/fifo_buffer.h"

namespace grape::log {

/// @brief A buffered lock-free logger suitable for realtime applications
class Logger {
public:
  /// Create logger
  /// @param config Configuration parameters
  explicit Logger(Config&& config);

  /// @return true if messages at specified severity are logged
  [[nodiscard]] constexpr auto canLog(Severity severity) const noexcept -> bool {
    return (severity <= config_.threshold);
  }

  /// Log a message
  /// @param severity Severity level
  /// @param message message string
  /// @param loc location in source (autogenerated by default)
  void log(Severity severity, const std::string& message,
           const std::source_location& loc = std::source_location::current()) {
    log(Record{ .timestamp = std::chrono::system_clock::now(),  //
                .location = loc,                                //
                .logger_name = config_.logger_name.c_str(),     //
                .message = message.c_str(),                     //
                .severity = severity });
  }

  /// @return Total number of logs that were missed due to queue overflow
  [[nodiscard]] auto missedLogs() const noexcept -> std::uint32_t {
    return missed_logs_.load(std::memory_order_relaxed);
  }

  ~Logger();
  Logger(Logger const&) = delete;
  Logger(Logger&&) = delete;
  void operator=(Logger const&) = delete;
  void operator=(Logger&&) = delete;

private:
  void log(const Record& record);
  void sinkLoop() noexcept;
  void flush() noexcept;

  static_assert(std::atomic_uint32_t::is_always_lock_free);
  Config config_{};
  std::atomic_uint32_t missed_logs_{ 0 };
  realtime::FIFOBuffer queue_;
  struct Backend;
  std::unique_ptr<Backend> backend_{ nullptr };
};
}  // namespace grape::log