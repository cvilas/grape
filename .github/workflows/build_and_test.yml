name: Build and Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch history for versioning
        run: |
          git fetch --unshallow --tags || git fetch --depth=100 --tags

      - name: Install system dependencies and utilities 
        run: |
          chmod +x ./toolchains/install_base.sh
          ./toolchains/install_base.sh

      - name: Install CMake
        run: |
          chmod +x ./toolchains/install_cmake.sh
          ./toolchains/install_cmake.sh

      - name: Install LLVM/Clang toolchain
        run: |
          chmod +x ./toolchains/install_llvm.sh
          ./toolchains/install_llvm.sh

      - name: Set cache directories
        run: |
          echo "CCACHE_DIR=$HOME/.cache/ccache" >> $GITHUB_ENV
          echo "CTCACHE_DIR=$HOME/.cache/ctcache" >> $GITHUB_ENV

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.CCACHE_DIR }}
            ${{ env.CTCACHE_DIR }}
          key: ${{ runner.os }}-ccache-ctcache-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake', '**/toolchain.cmake') }}          
          restore-keys: |
            ${{ runner.os }}-ccache-ctcache-

      - name: Configure
        run: cmake --preset clang

      - name: Build
        run: cmake --build build/clang --target all examples tests

      - name: Report ccache stats
        run: ccache -s        

      - name: Run unit tests
        run: cmake --build build/clang --target check

# TODO
# - Setup a self-hosted runner (https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/about-self-hosted-runners)
# - Add separate pipelines for X86 and Arm64
# - Refactor and simplify caching strategy. Maintan cache per arch-vendor-os triplet maybe
# - Build for both clang and gcc
# - Fail on linting or formatting errors
# - Setup configuration presets for applications, developer and CI builds
# - After PR is merged and newly tagged, build and generate deployment artifacts (tarball)
# - Introduce sanitizer builds including [RTSan](https://clang.llvm.org/docs/RealtimeSanitizer.html)
