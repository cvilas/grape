#=================================================================================================
# GRAPE
#=================================================================================================

# This file encodes language usage rules and some style rules
#
# Checks for safe usage of language features come from
# - CERT C++ coding standard
# - Google coding standard
# - CPPCoreGuidelines
# - High Integrity C++ coding standard
#
# Style rules:
# - The linter prompts the developer to use Modern C++ features with `modernize-*` checks
# - Style rules comes from ROS coding style (see corresponding .clang-format file. Identifier naming conventions are
# encoded in this file with `readability-*` rules
#
# Additionally, checks are turned on to catch
# - Use of language features that may be bug-prone
# - Use of language features that may cause performance issues

# Enable rule sets. Some checks are turned off because they are flagged by multiple rule-sets
Checks:          '-*,
                 bugprone-*,
                 -bugprone-easily-swappable-parameters,
                 cert-*,
                 concurrency-*,
                 cppcoreguidelines-*,
                 clang-analyzer-*,
                 -clang-analyzer-optin.core.EnumCastOutOfRange,
                 google-*,
                 -google-runtime-references,
                 -google-readability-todo,
                 hicpp-*,
                 -hicpp-uppercase-literal-suffix,
                 -hicpp-avoid-c-arrays,
                 -hicpp-no-array-decay,           # duplicates cppcoreguidelines-pro-bounds-array-to-pointer-decay,
                 -hicpp-special-member-functions, # TODO: enable this,
                 -hicpp-vararg,                   # duplicates cppcoreguidelines-pro-type-vararg,
                 -hicpp-exception-baseclass,      # TODO: enable this,
                 -hicpp-no-malloc,                # TODO: enable this,
                 misc-*,
                 -misc-include-cleaner,
                 modernize-*,
                 -modernize-avoid-c-arrays,
                 performance-*,
                 -performance-move-const-arg,     # duplicates hicpp-move-const-arg
                 readability-*,
                 -readability-uppercase-literal-suffix,
                 -readability-simplify-boolean-expr,
                 -readability-magic-numbers,
                 -readability-function-cognitive-complexity,
                 -readability-redundant-access-specifiers,
                 -readability-identifier-length,
                 -readability-braces-around-statements
                  '

# Upgrade warnings to errors
# WarningsAsErrors: '*'

# Check headers from `modules` only.
# Autogenerated headers for Qt apps are placed in build directory and therefore will be ignored.
HeaderFilterRegex: '/grape/modules/'

CheckOptions:
  - { key: cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor, value: 1 }
  - { key: cppcoreguidelines-avoid-do-while.IgnoreMacros,       value: 1}
  - { key: readability-identifier-naming.ConstexprVariableCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.GlobalConstantCase,    value: UPPER_CASE }
  - { key: readability-identifier-naming.NamespaceCase,         value: lower_case }
  - { key: readability-identifier-naming.ClassCase,             value: CamelCase }
  - { key: readability-identifier-naming.StructCase,            value: CamelCase }
  - { key: readability-identifier-naming.PrivateMemberCase,     value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberSuffix,   value: _ }
  - { key: readability-identifier-naming.ProtectedMemberCase,   value: lower_case }
  - { key: readability-identifier-naming.ProtectedMemberSuffix, value: _ }
  - { key: readability-identifier-naming.FunctionCase,          value: camelBack }
  - { key: readability-identifier-naming.MemberCase,            value: lower_case }
  - { key: readability-identifier-naming.ClassMemberCase,       value: lower_case }
  - { key: readability-identifier-naming.ParameterCase,         value: lower_case }
  - { key: readability-identifier-naming.VariableCase,          value: lower_case }
  - { key: readability-identifier-naming.LocalVariableCase,     value: lower_case }
  - { key: readability-identifier-naming.EnumCase,              value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantCase,      value: CamelCase }
  - { key: readability-function-cognitive-complexity.Threshold,                     value: 40 }
  - { key: readability-function-cognitive-complexity.DescribeBasicIncrements,       value: 0 }
  - { key: readability-function-cognitive-complexity.IgnoreMacros,                  value: 1 }
  - { key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic, value: 1}
...
